{"version":3,"sources":["components/form.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","id","data-image-width","data-image-height","data-animation-name","data-animation-duration","data-animation-delay","data-animation-direction","this","props","city","country","temperature","humidity","description","error","class","href","rel","onSubmit","getWeather","type","placeholder","Component","API_KEY","App","state","undefined","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","name","sys","weather","lineChartData","labels","datasets","label","borderColor","pointBackgroundColor","pointRadius","temp_min","temp_max","ctx","document","getElementById","getContext","Chart","defaults","global","defaultFontFamily","defaultFontSize","options","tooltips","titleSpacing","responsive","legend","display","scales","yAxes","gridLines","color","ticks","fontColor","stepSize","xAxes","React","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfce1fde.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Form extends Component {\n  render() {\n    return (\n\n      <section className=\"u-clearfix u-white u-section-1\" id=\"sec-99c6\">\n      <div className=\"u-clearfix u-expanded-width u-layout-wrap u-layout-wrap-1\">\n        <div className=\"u-layout\">\n          <div className=\"u-layout-col\">\n            <div className=\"u-size-40\">\n              <div className=\"u-layout-row\">\n                <div className=\"u-container-style u-layout-cell u-left-cell u-palette-1-base u-size-28 u-layout-cell-1\">\n                  <div className=\"u-container-layout u-container-layout-1\">\n                    <div className=\"u-expand-resize u-image u-image-circle u-image-1\" data-image-width={225} data-image-height={225} />\n                    <p className=\"u-text u-text-1\" data-animation-name=\"slideIn\" data-animation-duration={1000} data-animation-delay={0} data-animation-direction=\"Down\">Get Weather Condition Of Your City....</p>\n                  </div>\n                </div>\n                <div className=\"u-container-style u-layout-cell u-palette-1-base u-right-cell u-size-32 u-layout-cell-2\">\n                  <div className=\"u-container-layout u-valign-middle u-container-layout-2\">\n                   \n\n                      <div className=\"weather__info\">\n\t\t{this.props.city && this.props.country && (\n\t\t\t<p className=\"weather__key\">\n\t\t\t\t{' '}\n\t\t\t\tLocation:\n\t\t\t\t<span className=\"weather__value\">\n\t\t\t\t\t{' '}\n\t\t\t\t\t{this.props.city}, {this.props.country}\n\t\t\t\t</span>\n\t\t\t</p>\n\t\t)}\n\t\t{this.props.temperature && (\n\t\t\t<p className=\"weather__key\">\n\t\t\t\t{' '}\n\t\t\t\tTemperature:\n\t\t\t\t<span className=\"weather__value\"> {this.props.temperature}&#176;F </span>\n\t\t\t</p>\n\t\t)}\n\t\t{this.props.humidity && (\n\t\t\t<p className=\"weather__key\">\n\t\t\t\t{' '}\n\t\t\t\tHumidity:\n\t\t\t\t<span className=\"weather__value\"> {this.props.humidity}% </span>\n\t\t\t</p>\n\t\t)}\n\t\t{this.props.description && (\n\t\t\t<div>\n\t\t\t\t<p className=\"weather__key\">\n\t\t\t\t\t{' '}\n\t\t\t\t\tConditions:\n\t\t\t\t\t<span className=\"weather__value\"> {this.props.description} </span>\n\t\t\t\t</p>\n\t\t\t\t<p className=\"graph-header\">Range:</p>\n\t\t\t</div>\n\t\t)}\n\t\t{this.props.error && <p className=\"weather__error\">{this.props.error}</p>}\n\n\t\t<div class=\"chart-container\">\n\t\t\t<canvas id=\"myChart\" />\n\t\t</div>\n\t</div>\n</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"u-size-20\">\n              <div className=\"u-layout-row\">\n                <div className=\"u-align-left u-container-style u-layout-cell u-left-cell u-palette-1-base u-size-60 u-layout-cell-3\">\n                  <div className=\"u-container-layout u-container-layout-3\">\n                    <div className=\"u-clearfix u-custom-html u-custom-html-1\">\n                      <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\" />\n                   \n                      <div className=\"container form-container\">\n                        <div className=\"row\">\n                          <div className=\"col-md-6 input-form-1\">\n                            <h3>Enter Your City and Country</h3>\n                            <form onSubmit={this.props.getWeather}>\n                              <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control\" id=\"city\" placeholder=\"City\"  />\n                              </div>\n                              <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control\" id=\"country\" placeholder=\"Country\"  />\n                              </div>\n                              <div className=\"form-group\">\n                                <input type=\"submit\" className=\"btnSubmit\"  />\n                              </div>\n                             \n                            </form>\n                          </div>\n                         \n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n};","import React from 'react';\nimport Chart from 'chart.js';\nimport Form from './components/form';\n\nimport './App.css';\n\nconst API_KEY = '74f6da0e224e8b06ceeab76751e9e222';\nclass App extends React.Component {\n\tstate = {\n\t\ttemperature: undefined,\n\t\tcity: undefined,\n\t\tcountry: undefined,\n\t\thumidity: undefined,\n\t\tdescription: undefined,\n\t\terror: undefined,\n\t};\n\tgetWeather = async e => {\n\t\te.preventDefault();\n\t\tconst city = e.target.elements.city.value;\n\t\tconst country = e.target.elements.country.value;\n\t\tconst api_call = await fetch(\n\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`\n\t\t);\n\t\tconst data = await api_call.json();\n\t\tif (city && country) {\n\t\t\tthis.setState({\n\t\t\t\ttemperature: data.main.temp,\n\t\t\t\tcity: data.name,\n\t\t\t\tcountry: data.sys.country,\n\t\t\t\thumidity: data.main.humidity,\n\t\t\t\tdescription: data.weather[0].description,\n\t\t\t\terror: '',\n\t\t\t});\n\t\t\tvar lineChartData = {\n\t\t\t\tlabels: ['Low', 'Current', 'High'],\n\t\t\t\tdatasets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: '',\n\t\t\t\t\t\tborderColor: '#2757a0',\n\t\t\t\t\t\tpointBackgroundColor: '#ffffff',\n\t\t\t\t\t\tpointRadius: 5,\n\t\t\t\t\t\tdata: [data.main.temp_min, data.main.temp, data.main.temp_max],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t};\n\t\t\tvar ctx = document.getElementById('myChart').getContext('2d');\n\t\t\tChart.defaults.global.defaultFontFamily = 'Open Sans';\n\t\t\tChart.defaults.global.defaultFontSize = '17';\n\t\t\tvar myLineChart = new Chart(ctx, {\n\t\t\t\ttype: 'line',\n\t\t\t\tdata: lineChartData,\n\t\t\t\toptions: {\n\t\t\t\t\ttooltips: {\n\t\t\t\t\t\ttitleSpacing: 5,\n\t\t\t\t\t},\n\t\t\t\t\tresponsive: true,\n\t\t\t\t\tlegend: {\n\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t},\n\t\t\t\t\tscales: {\n\t\t\t\t\t\tyAxes: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgridLines: {\n\t\t\t\t\t\t\t\t\tcolor: '#354657',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\t\tfontColor: '#ffffff;',\n\t\t\t\t\t\t\t\t\tstepSize: 5,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\txAxes: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgridLines: {\n\t\t\t\t\t\t\t\t\tcolor: '#354657',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\t\tfontColor: '#ffffff',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\ttemperature: undefined,\n\t\t\t\tcity: undefined,\n\t\t\t\tcountry: undefined,\n\t\t\t\thumidity: undefined,\n\t\t\t\tdescription: undefined,\n\t\t\t\terror: 'Please enter city and country.',\n\t\t\t});\n\t\t}\n\t};\n\n  render() {\n\t\treturn (\n      <div>\n    <div>\n     <Form getWeather={this.getWeather}\n     \n     temperature={this.state.temperature}\n     humidity={this.state.humidity}\n\t city={this.state.city}\n\t country={this.state.country}\n\t description={this.state.description}\n\t error={this.state.error}\n     \n     \n     />\n    </div>\n    \n    </div>\n  );\n};\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}